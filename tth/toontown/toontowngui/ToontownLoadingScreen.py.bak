from pandac.PandaModules import *
from direct.gui.DirectGui import *
from toontown.toonbase import ToontownGlobals
from toontown.toonbase import TTLocalizer
from toontown.hood import ZoneUtil
import random


LOADING_SCREEN_SORT_INDEX = 4000

class ToontownLoadingScreen():
    __module__ = __name__

    def __init__(self):
        self.__expectedCount = 0
        self.__count = 0
        self.screen = loader.loadModel('phase_3/models/gui/progress-background')
        self.gui = NodePath('gui')
        self.bg = self.screen.find('**/bg')
        self.bg.setScale(0.8,0,1)
        self.shadow = self.screen.find('**/bar_shadow')
        self.shadow.reparentTo(self.gui)
        self.banner = hidden.attachNewNode('__dummy__')

        self.tip = DirectLabel(guiId='ToontownLoadingScreenTip', parent=self.gui, relief=None, pos=(0.0, 0, .55), text='', textMayChange=1, text_scale=0.06, text_fg=(1, 1, 1, 1), text_shadow=(0, 0, 0, 1), text_wordwrap=25, text_align=TextNode.ACenter, text_font=ToontownGlobals.getSignFont())

        self.title = DirectLabel(guiId = 'ToontownLoadingScreenTitle', parent = self.gui, relief = None,
                                 pos = (-1.06, 0, -0.77), text = '', textMayChange = 1, text_scale = 0.08,
                                 text_fg = (0, .9, 0, 1), text_align = TextNode.ALeft,
                                 text_font = ToontownGlobals.getMinnieFont())
                                 
        self.waitBar = DirectWaitBar(guiId = 'ToontownLoadingScreenWaitBar', parent = self.gui,
                                     frameSize = (-1.06, 1.06, -0.03, 0.03), pos = (0, 0, -0.85),
                                     text = '')
        logoScale = 0.5625  # Scale for our locked aspect ratio (2:1).
        self.logo = OnscreenImage('phase_3/maps/toontown-logo-new.png')
        self.logo.reparentTo(self.gui)
        self.logo.setScale(self.gui, (0.73,1,0.55))
        self.logo.setTransparency(TransparencyAttrib.MAlpha)
        scale = self.logo.getScale()
        # self.logo.setPos(scale[0], 0, -scale[2])
        self.logo.setPos(0, 0, -scale[2])
        self.toon = None

    def destroy(self):
        self.tip.destroy()
        self.title.destroy()
        self.waitBar.destroy()
        self.gui.removeNode()
        if self.toon:
            self.toon.delete()
        self.logo.removeNode()

    def getTip(self, tipCategory):
        return TTLocalizer.TipTitle + '\n' + random.choice(TTLocalizer.TipDict.get(tipCategory))

    def begin(self, range, label, gui, tipCategory, zoneId):
        self.waitBar['range'] = range
        self.title['text'] = label
        self.__count = 0
        self.__expectedCount = range
        if gui:
            if base.localAvatarStyle:
                from toontown.toon import Toon
                bored = {'emote':'bored', 'frame':135} #must define before list
                run = {'emote':'run', 'frame':7}
                victory = {'emote':'victory', 'frame':10}
                applause = {'emote':'applause', 'frame':23}
                dust = {'emote':'sprinkle-dust', 'frame':40}
                hypno = {'emote':'hypnotize', 'frame':25}
                cringe = {'emote':'cringe', 'frame':25}
                wave = {'emote':'wave', 'frame':25}
                shrug = {'emote':'shrug', 'frame':30}
                duck = {'emote':'duck', 'frame':40}
                up = {'emote':'up', 'frame':60}
                pushup = {'emote':'down', 'frame':23}
                bow = {'emote':'bow', 'frame':45}
                emotelist = [bored, run, victory, applause, dust,
                             hypno, cringe, wave, shrug, duck,
                             up, pushup, bow]
                emotechosen = random.choice(emotelist)
                self.toon = Toon.Toon()
                self.toon.setDNA(base.localAvatarStyle)
                self.toon.pose(emotechosen['emote'], emotechosen['frame'])
                self.toon.getGeomNode().setDepthWrite(1)
                self.toon.getGeomNode().setDepthTest(1)
                self.toon.setHpr(205, 0, 0)
                self.toon.setScale(0.18)
                self.toon.setPos(base.a2dBottomRight.getX()/1.25, 0, -0.034)
                self.toon.reparentTo(self.waitBar)
                self.waitBar['frameSize'] = (base.a2dLeft+(base.a2dRight/8.15), base.a2dRight-(base.a2dRight/2.57), -0.03, 0.03)
            self.title.reparentTo(base.a2dpBottomLeft, LOADING_SCREEN_SORT_INDEX)
            self.title.setPos(0.24, 0, 0.23)
            self.tip['text'] = self.getTip(tipCategory)
            self.gui.setPos(0, -0.1, 0)
            self.gui.reparentTo(aspect2d, LOADING_SCREEN_SORT_INDEX)
        else:
            self.title.reparentTo(base.a2dpBottomLeft, LOADING_SCREEN_SORT_INDEX)
            self.gui.reparentTo(hidden)
            self.logo.reparentTo(hidden)
        self.tip.reparentTo(base.a2dpBottomCenter, LOADING_SCREEN_SORT_INDEX)
        self.waitBar.reparentTo(base.a2dpBottomCenter, LOADING_SCREEN_SORT_INDEX)
        self.waitBar.update(self.__count)

    def end(self):
        self.waitBar.finish()
        self.waitBar.reparentTo(self.gui)
        self.title.reparentTo(self.gui)
        self.tip.reparentTo(self.gui)
        self.gui.reparentTo(hidden)
        if self.toon:
            self.toon.reparentTo(hidden)
        self.logo.reparentTo(hidden)
        return (self.__expectedCount, self.__count)

    def abort(self):
        self.gui.reparentTo(hidden)

    def tick(self):
        self.__count = self.__count + 1
        self.waitBar.update(self.__count)
